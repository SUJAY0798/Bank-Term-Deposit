min_n(),
levels = 2)
tree_grid
set.seed(356)
tree_tuning <- tree_workflow %>%
tune_grid(resamples = credit_card_df_folds,
grid = tree_grid)
tree_tuning %>% show_best('roc_auc')
best_tree <- tree_tuning %>%
select_best(metric = 'roc_auc')
best_tree
final_tree_workflow <- tree_workflow %>%
finalize_workflow(best_tree)
tree_wf_fit <- final_tree_workflow %>%
fit(data = credit_card_df_training)
tree_fit <- tree_wf_fit %>%
extract_fit_parsnip()
vip(tree_fit)
library(vip)
install.packages("vip")
library(vip)
vip(tree_fit)
library(vip)
tree_model <- decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine('rpart') %>%
set_mode('classification')
set.seed(356)
tree_workflow <- workflow() %>%
add_model(tree_model) %>%
add_recipe(credit_card_df_recipe)
tree_grid <- grid_regular(cost_complexity(),
tree_depth(),
min_n(),
levels = 2)
tree_grid
set.seed(356)
tree_tuning <- tree_workflow %>%
tune_grid(resamples = credit_card_df_folds,
grid = tree_grid)
tree_tuning %>% show_best('roc_auc')
best_tree <- tree_tuning %>%
select_best(metric = 'roc_auc')
best_tree
final_tree_workflow <- tree_workflow %>%
finalize_workflow(best_tree)
tree_wf_fit <- final_tree_workflow %>%
fit(data = credit_card_df_training)
tree_fit <- tree_wf_fit %>%
extract_fit_parsnip()
vip(tree_fit)
rpart.plot(tree_fit$fit, roundint = FALSE, extra = 2)
library(vip)
library(rpart.plot)
install.packages("rpart.plot")
library(vip)
library(rpart.plot)
tree_model <- decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine('rpart') %>%
set_mode('classification')
set.seed(356)
tree_workflow <- workflow() %>%
add_model(tree_model) %>%
add_recipe(credit_card_df_recipe)
tree_grid <- grid_regular(cost_complexity(),
tree_depth(),
min_n(),
levels = 2)
tree_grid
set.seed(356)
tree_tuning <- tree_workflow %>%
tune_grid(resamples = credit_card_df_folds,
grid = tree_grid)
tree_tuning %>% show_best('roc_auc')
best_tree <- tree_tuning %>%
select_best(metric = 'roc_auc')
best_tree
final_tree_workflow <- tree_workflow %>%
finalize_workflow(best_tree)
tree_wf_fit <- final_tree_workflow %>%
fit(data = credit_card_df_training)
tree_fit <- tree_wf_fit %>%
extract_fit_parsnip()
vip(tree_fit)
rpart.plot(tree_fit$fit, roundint = FALSE, extra = 2)
tree_last_fit <- final_tree_workflow %>%
last_fit(credit_card_df_split)
tree_last_fit %>% collect_predictions() %>%
roc_curve(truth  = customer_status, estimate = .pred_yes) %>%
autoplot()
library(vip)
library(rpart.plot)
tree_model <- decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine('rpart') %>%
set_mode('classification')
set.seed(356)
tree_workflow <- workflow() %>%
add_model(tree_model) %>%
add_recipe(credit_card_df_recipe)
tree_grid <- grid_regular(cost_complexity(),
tree_depth(),
min_n(),
levels = 2)
tree_grid
set.seed(356)
tree_tuning <- tree_workflow %>%
tune_grid(resamples = credit_card_df_folds,
grid = tree_grid)
tree_tuning %>% show_best('roc_auc')
best_tree <- tree_tuning %>%
select_best(metric = 'roc_auc')
best_tree
final_tree_workflow <- tree_workflow %>%
finalize_workflow(best_tree)
tree_wf_fit <- final_tree_workflow %>%
fit(data = credit_card_df_training)
tree_fit <- tree_wf_fit %>%
extract_fit_parsnip()
vip(tree_fit)
rpart.plot(tree_fit$fit, roundint = FALSE, extra = 2)
tree_last_fit <- final_tree_workflow %>%
last_fit(credit_card_df_split)
tree_last_fit %>% collect_predictions() %>%
roc_curve(truth  = customer_status, estimate = .pred_closed_account) %>%
autoplot()
tree_predictions <- tree_last_fit %>% collect_predictions()
conf_mat(tree_predictions, truth = customer_status, estimate = .pred_class)
#Random Forest
library(ranger)
library(ggplot2)
rf_model <- rand_forest(mtry = tune(),
trees = tune(),
min_n = tune()) %>%
set_engine('ranger', importance = "impurity") %>%
set_mode('classification')
rf_workflow <- workflow() %>%
add_model(rf_model) %>%
add_recipe(credit_card_recipe)
#Random Forest
library(ranger)
library(ggplot2)
random_forest_model <- rand_forest(mtry = tune(),
trees = tune(),
min_n = tune()) %>%
set_engine('ranger', importance = "impurity") %>%
set_mode('classification')
random_forest_workflow <- workflow() %>%
add_model(random_forest_model) %>%
add_recipe(credit_card_df_recipe)
set.seed(356)
random_forest_grid <- grid_random(mtry() %>% range_set(c(3, 5)),
trees(),
min_n(),
size = 5)
random_forest_grid
set.seed(300)
random_forest_tuning <- random_forest_workflow %>%
tune_grid(resamples = credit_card_df_folds,
grid = rf_grid)
#Random Forest
library(ranger)
library(ggplot2)
random_forest_model <- rand_forest(mtry = tune(),
trees = tune(),
min_n = tune()) %>%
set_engine('ranger', importance = "impurity") %>%
set_mode('classification')
random_forest_workflow <- workflow() %>%
add_model(random_forest_model) %>%
add_recipe(credit_card_df_recipe)
set.seed(356)
random_forest_grid <- grid_random(mtry() %>% range_set(c(3, 5)),
trees(),
min_n(),
size = 5)
random_forest_grid
set.seed(300)
random_forest_tuning <- random_forest_workflow %>%
tune_grid(resamples = credit_card_df_folds,
grid = random_forest_grid)
random_forest_tuning %>% show_best('roc_auc')
best_random_forest <- random_forest_tuning %>%
select_best(metric = 'roc_auc')
best_random_forest
final_random_forest_workflow <- random_forest_workflow %>%
finalize_workflow(best_random_forest)
random_forest_wf_fit <- final_random_forest_workflow %>%
fit(data = credit_card_df_training)
random_forest_fit <- random_forest_wf_fit %>%
extract_fit_parsnip()
random_forest_last_fit <- final_random_forest_workflow %>%
last_fit(credit_card_split)
#Random Forest
library(ranger)
library(ggplot2)
random_forest_model <- rand_forest(mtry = tune(),
trees = tune(),
min_n = tune()) %>%
set_engine('ranger', importance = "impurity") %>%
set_mode('classification')
random_forest_workflow <- workflow() %>%
add_model(random_forest_model) %>%
add_recipe(credit_card_df_recipe)
set.seed(356)
random_forest_grid <- grid_random(mtry() %>% range_set(c(3, 5)),
trees(),
min_n(),
size = 5)
random_forest_grid
set.seed(300)
random_forest_tuning <- random_forest_workflow %>%
tune_grid(resamples = credit_card_df_folds,
grid = random_forest_grid)
random_forest_tuning %>% show_best('roc_auc')
best_random_forest <- random_forest_tuning %>%
select_best(metric = 'roc_auc')
best_random_forest
final_random_forest_workflow <- random_forest_workflow %>%
finalize_workflow(best_random_forest)
random_forest_wf_fit <- final_random_forest_workflow %>%
fit(data = credit_card_df_training)
random_forest_fit <- random_forest_wf_fit %>%
extract_fit_parsnip()
random_forest_last_fit <- final_random_forest_workflow %>%
last_fit(credit_card_df_split)
#ROC Curve
random_forest_last_fit %>% collect_predictions() %>%
roc_curve(truth  = customer_status, estimate = .pred_closed_account) %>%
autoplot()
#Confusion Matrix
random_forest_predictions <- random_forest_last_fit %>% collect_predictions()
#f_measure
f_meas(random_forest_predictions, truth = customer_status, estimate = .pred_class)
#Confusion Matrix
conf_mat(random_forest_predictions, truth = customer_status, estimate = .pred_class)
#Random Forest
library(ranger)
library(ggplot2)
random_forest_model <- rand_forest(mtry = tune(),
trees = tune(),
min_n = tune()) %>%
set_engine('ranger', importance = "impurity") %>%
set_mode('classification')
random_forest_workflow <- workflow() %>%
add_model(random_forest_model) %>%
add_recipe(credit_card_df_recipe)
set.seed(356)
random_forest_grid <- grid_random(mtry() %>% range_set(c(3, 5)),
trees(),
min_n(),
size = 5)
random_forest_grid
set.seed(356)
random_forest_tuning <- random_forest_workflow %>%
tune_grid(resamples = credit_card_df_folds,
grid = random_forest_grid)
random_forest_tuning %>% show_best('roc_auc')
best_random_forest <- random_forest_tuning %>%
select_best(metric = 'roc_auc')
best_random_forest
final_random_forest_workflow <- random_forest_workflow %>%
finalize_workflow(best_random_forest)
random_forest_wf_fit <- final_random_forest_workflow %>%
fit(data = credit_card_df_training)
random_forest_fit <- random_forest_wf_fit %>%
extract_fit_parsnip()
random_forest_last_fit <- final_random_forest_workflow %>%
last_fit(credit_card_df_split)
#ROC Curve
random_forest_last_fit %>% collect_predictions() %>%
roc_curve(truth  = customer_status, estimate = .pred_closed_account) %>%
autoplot()
#Confusion Matrix
random_forest_predictions <- random_forest_last_fit %>% collect_predictions()
#f_measure
f_meas(random_forest_predictions, truth = customer_status, estimate = .pred_class)
#Confusion Matrix
conf_mat(random_forest_predictions, truth = customer_status, estimate = .pred_class)
set.seed(356)
logistic_model <- logistic_reg() %>%
set_engine('glm') %>%
set_mode('classification')
logistic_workflow <- workflow() %>%
add_model(logistic_model) %>%
add_recipe(credit_card_df_recipe)
logistic_fit <-  logistic_workflow %>%
last_fit(split=credit_card_df_split)
logistic_results <-  logistic_fit %>%
collect_predictions()
roc_curve( logistic_results , truth = customer_status,estimate = .pred_closed_account ) %>%
autoplot()
roc_auc(logistic_results, truth = customer_status, .pred_closed_account)
conf_mat(logistic_results, truth = customer_status, estimate = .pred_class)
my_metrics_set<- metric_set(accuracy,sens,spec,f_meas)
my_metrics_set(logistic_results,truth=customer_status,estimate=.pred_class)
my_metrics_set<- metric_set(accuracy,sens,spec,f_meas)
my_metrics_set(random_forest_predictions,truth=customer_status,estimate=.pred_class)
my_metrics_set<- metric_set(accuracy,sens,spec,f_meas)
my_metrics_set(tree_predictions,truth=customer_status,estimate=.pred_class)
library(vip)
library(rpart.plot)
tree_model <- decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine('rpart') %>%
set_mode('classification')
set.seed(356)
tree_workflow <- workflow() %>%
add_model(tree_model) %>%
add_recipe(credit_card_df_recipe)
tree_grid <- grid_regular(cost_complexity(),
tree_depth(),
min_n(),
levels = 2)
tree_grid
set.seed(356)
tree_tuning <- tree_workflow %>%
tune_grid(resamples = credit_card_df_folds,
grid = tree_grid)
tree_tuning %>% show_best('roc_auc')
best_tree <- tree_tuning %>%
select_best(metric = 'roc_auc')
best_tree
final_tree_workflow <- tree_workflow %>%
finalize_workflow(best_tree)
tree_wf_fit <- final_tree_workflow %>%
fit(data = credit_card_df_training)
tree_fit <- tree_wf_fit %>%
extract_fit_parsnip()
vip(tree_fit)
rpart.plot(tree_fit$fit, roundint = FALSE, extra = 2)
tree_last_fit <- final_tree_workflow %>%
last_fit(credit_card_df_split)
tree_last_fit %>% collect_predictions() %>%
roc_curve(truth  = customer_status, estimate = .pred_closed_account) %>%
autoplot()
tree_predictions <- tree_last_fit %>% collect_predictions()
my_metrics_set<- metric_set(accuracy,sens,spec,f_meas)
my_metrics_set(tree_predictions,truth=customer_status,estimate=.pred_class)
conf_mat(tree_predictions, truth = customer_status, estimate = .pred_class)
#Random Forest
library(ranger)
library(ggplot2)
random_forest_model <- rand_forest(mtry = tune(),
trees = tune(),
min_n = tune()) %>%
set_engine('ranger', importance = "impurity") %>%
set_mode('classification')
random_forest_workflow <- workflow() %>%
add_model(random_forest_model) %>%
add_recipe(credit_card_df_recipe)
set.seed(356)
random_forest_grid <- grid_random(mtry() %>% range_set(c(3, 5)),
trees(),
min_n(),
size = 5)
random_forest_grid
set.seed(356)
random_forest_tuning <- random_forest_workflow %>%
tune_grid(resamples = credit_card_df_folds,
grid = random_forest_grid)
random_forest_tuning %>% show_best('roc_auc')
random_forest_tuning %>% show_best('roc_auc')
# Suppress dplyr summarise grouping warning messages
options(dplyr.summarise.inform = FALSE)
library(tidyverse)
library(tidymodels)
credit_card_df <- readRDS(url('https://gmubusinessanalytics.netlify.app/data/credit_card_df.rds'))
credit_card_df %>% group_by(customer_status) %>%
summarise(count = n())
credit_card_df %>% group_by(customer_status,card_type) %>%
summarise(count = n())
ggplot(credit_card_df, aes(card_type , ..count..)) + geom_bar(aes(fill = customer_status), position = "dodge")
credit_card_df  %>% group_by(customer_status,months_inactive_last_year) %>%
summarise(count = n())
ggplot(data = credit_card_df, aes(x = months_inactive_last_year, fill = customer_status)) +geom_histogram(aes(y = ..density..), bins = 7) +
facet_wrap(~ customer_status, nrow = 2) +
labs(title = "customer_status ( Service - ACTIVE/CLOSED)",
x = "months_inactive_lastyear", y = "count")
credit_card_df  %>% group_by(customer_status,employment_status) %>%
summarise(count1 = n())
credit_card_df  %>% group_by(customer_status,employment_status) %>%
summarise(median_credit_limit = median(credit_limit))
ggplot(credit_card_df, aes(employment_status , ..count..)) + geom_bar(aes(fill = customer_status), position = "dodge")
credit_card_df  %>% group_by(customer_status,contacted_last_year) %>%
summarise(count = n())
ggplot(credit_card_df, aes(x = customer_status, y = income)) +
geom_boxplot()
set.seed(356)
credit_card_df_split <- initial_split( credit_card_df , prop = 0.75,
strata = customer_status)
credit_card_df_training <- credit_card_df_split %>% training()
credit_card_df_test <- credit_card_df_split%>% testing()
#Feature Engineering
credit_card_df_recipe <- recipe(customer_status ~., data = credit_card_df) %>%
step_YeoJohnson(all_numeric(), -all_outcomes()) %>%
step_normalize(all_numeric(), -all_outcomes()) %>%
step_dummy(all_nominal(), -all_outcomes())
credit_card_df_recipe %>%
prep() %>%
bake(new_data = NULL)
set.seed(356)
credit_card_df_folds <- vfold_cv(credit_card_df, v = 5)
levels(credit_card_df$customer_status)
library(vip)
library(rpart.plot)
tree_model <- decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine('rpart') %>%
set_mode('classification')
set.seed(356)
tree_workflow <- workflow() %>%
add_model(tree_model) %>%
add_recipe(credit_card_df_recipe)
tree_grid <- grid_regular(cost_complexity(),
tree_depth(),
min_n(),
levels = 2)
tree_grid
set.seed(356)
tree_tuning <- tree_workflow %>%
tune_grid(resamples = credit_card_df_folds,
grid = tree_grid)
tree_tuning %>% show_best('roc_auc')
best_tree <- tree_tuning %>%
select_best(metric = 'roc_auc')
best_tree
final_tree_workflow <- tree_workflow %>%
finalize_workflow(best_tree)
tree_wf_fit <- final_tree_workflow %>%
fit(data = credit_card_df_training)
tree_fit <- tree_wf_fit %>%
extract_fit_parsnip()
vip(tree_fit)
rpart.plot(tree_fit$fit, roundint = FALSE, extra = 2)
tree_last_fit <- final_tree_workflow %>%
last_fit(credit_card_df_split)
tree_last_fit %>% collect_predictions() %>%
roc_curve(truth  = customer_status, estimate = .pred_closed_account) %>%
autoplot()
tree_predictions <- tree_last_fit %>% collect_predictions()
my_metrics_set<- metric_set(accuracy,sens,spec,f_meas)
my_metrics_set(tree_predictions,truth=customer_status,estimate=.pred_class)
conf_mat(tree_predictions, truth = customer_status, estimate = .pred_class)
#Random Forest
library(ranger)
library(ggplot2)
random_forest_model <- rand_forest(mtry = tune(),
trees = tune(),
min_n = tune()) %>%
set_engine('ranger', importance = "impurity") %>%
set_mode('classification')
random_forest_workflow <- workflow() %>%
add_model(random_forest_model) %>%
add_recipe(credit_card_df_recipe)
set.seed(356)
random_forest_grid <- grid_random(mtry() %>% range_set(c(3, 5)),
trees(),
min_n(),
size = 5)
random_forest_grid
set.seed(356)
random_forest_tuning <- random_forest_workflow %>%
tune_grid(resamples = credit_card_df_folds,
grid = random_forest_grid)
random_forest_tuning %>% show_best('roc_auc')
best_random_forest <- random_forest_tuning %>%
select_best(metric = 'roc_auc')
best_random_forest
final_random_forest_workflow <- random_forest_workflow %>%
finalize_workflow(best_random_forest)
random_forest_wf_fit <- final_random_forest_workflow %>%
fit(data = credit_card_df_training)
random_forest_fit <- random_forest_wf_fit %>%
extract_fit_parsnip()
random_forest_last_fit <- final_random_forest_workflow %>%
last_fit(credit_card_df_split)
#ROC Curve
random_forest_last_fit %>% collect_predictions() %>%
roc_curve(truth  = customer_status, estimate = .pred_closed_account) %>%
autoplot()
#Confusion Matrix
random_forest_predictions <- random_forest_last_fit %>% collect_predictions()
#f_measure
#f_meas(random_forest_predictions, truth = customer_status, estimate = .pred_class)
my_metrics_set<- metric_set(accuracy,sens,spec,f_meas)
my_metrics_set(random_forest_predictions,truth=customer_status,estimate=.pred_class)
#Confusion Matrix
conf_mat(random_forest_predictions, truth = customer_status, estimate = .pred_class)
set.seed(356)
logistic_model <- logistic_reg() %>%
set_engine('glm') %>%
set_mode('classification')
logistic_workflow <- workflow() %>%
add_model(logistic_model) %>%
add_recipe(credit_card_df_recipe)
logistic_fit <-  logistic_workflow %>%
last_fit(split=credit_card_df_split)
logistic_results <-  logistic_fit %>%
collect_predictions()
roc_curve( logistic_results , truth = customer_status,estimate = .pred_closed_account ) %>%
autoplot()
roc_auc(logistic_results, truth = customer_status, .pred_closed_account)
conf_mat(logistic_results, truth = customer_status, estimate = .pred_class)
my_metrics_set<- metric_set(accuracy,sens,spec,f_meas)
my_metrics_set(logistic_results,truth=customer_status,estimate=.pred_class)
